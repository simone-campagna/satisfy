#!/usr/bin/env satisfy
### DOMAIN DEFINITION ######################################
# you can optionally create domains with a given name;
# domain definition can contain
# - integers [1, 2, 3]
# - ranges [10:15, 20:30]
# - ranges with strides [1:100:3]

# create domain 'D0' containing [1, 2, 10, 11, 12, 13, 14, 15]
D0 = [1, 2, 10:15]

### VARIABLE DEFINITION ####################################
# you must define the variables that you're going to use
# in constraints and optimization objectives;
# the variable definition requires the variable domain:
# - a named domain
# - a domain expression
# you can declare a list of variables with the same domain

# create variable 'x' with domain 'D0'
x :: D0

# create variables 'y', 'z' with domain [1, 3, 5]
y, z :: [1:5:2]

# optionally create macros
difference := x - z

### CONSTRAINTS ############################################
# you can create constraints:

# create constraint x + y + z > 10
x + y + z > 10

# create constraint x * y * z < 100
x * y * z < 100

# create all_different constraint
all_different(x, y, z)

### OPTIMIZATION ###########################################
# you can optionally set optimization objectives:
# - minimize
# - maximize

maximize(difference)

### OPTIONS ################################################
# you can optionally set solver options:
# - select_var [SelectVar]
# - select_value [SelectValue]
# - limit [int]
# - timeout [float]

# set select_var = SelectVar.in_order
option(select_var, in_order)

# set select_value = SelectValue.random
option(select_value, random)

# set limit = 3
# option(limit, 3)

# set timeout = 0.5
# option(timeout, 0.5)

### OUTPUT #################################################
# You can optionally set output lines; for each solution
# all the output lines are shown. Variables in {...} are
# substituted, according to python string formatting.
[solution] <<<
=== solution[{_stats.count}]
x is {x:2d}
y is {y:2d}
z is {z:2d}
x - z == {difference}

>>>
